/**
 一：web storage和cookie的区别?
    1.数据大小 -> Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，
           另外cookie还需要指定作用域，不可以跨域调用。
    2.数据有效时长  -> cookie只在设置cookie过期时间前有效，sessionStorage在当前窗口关闭前有效，localStorage始终有效，除非人为删除
    3.易用性  ->  web Storage都具有相同的操作方法，例如setItem、getItem和removeItem等,cookie需要自己封装
    4.服务器通信  -> Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，
           而Web Storage仅仅是为了在本地“存储”数据而生（浏览器多标签页通信）

 二：线程与进程的区别
    1.一个程序至少有一个进程,一个进程至少有一个线程. 
    2.线程的划分尺度小于进程，使得多线程程序的并发性高。 
        另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 
    3.线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。
        但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 
    4.从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。
        但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。


 三：cookie 和session的区别？
    1、cookie数据存放在客户的浏览器上，session数据放在服务器上。
    2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。
    3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。
    4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。
    5、所以个人建议：将登陆信息等重要信息存放为SESSION，其他信息如果需要保留，可以放在COOKIE中

 四：你如何对网站的优化？
    期待的解决方案包括：
        文件合并
        文件压缩/文件最小化gzip
        使用 CDN 托管
        缓存的使用（多个域名来提供缓存，浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量）
        添加ETag或者添加Expires或者Cache-Control头
        减少cookie的大小
        避免空的src的标签
        其他
    请说出三种减少页面加载时间的方法。
        1.优化图片 
        2.图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方） 
        3.优化CSS（压缩合并css，如margin-top,margin-left...) 
        4.减少DNS查找（DNS缓存浏览器、计算机、服务器中）
        4.网址后加斜杠（如www.campr.com/目录，会判断这个“目录是什么文件类型，或者是根目录/。），减少重定向 
        5.标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。
            这不但影响速度，也影响浏览体验当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，
            然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。） 
        6.减少http请求。
        7.避免重定向，多余的中间访问
        8.非必须组件延迟加载，减少页面加载时间
    减少http请求？
        1.js、css合并文件
        2.css sprites合并图片（优点：减少HTTP请求数，极大地提高页面加载速度，增加图片信息重复度，提高压缩比，减少图片大小）
            缺点：图片合并麻烦；维护麻烦，修改一个图片可能需要从新布局整个图片，样式
        3.利用css3代替一些图片，还有内联图片，用base64实现图片（但是会带来无法缓存图片得问题，文档会增大）
        4.图片地图，允许在一个图片上关联多个url
        5.充分利用浏览器缓存
    性能优化？
        1.上面提到的属于优化！
        2.设置多样式用className，而不是直接操作style
        3.少使用全局变量，缓存DOM节点查找结果
        4.避免使用css表达式，动态属性
        5.用innerHTML代替DOM操作,减少DOM操作
        6.页面结构，将样式表放在顶部（避免白屏和FOUC），将脚本放在底部（避免阻塞），尽早刷新文档输出

 五：null和undefined的区别？
        1.null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN。
        2.当声明的变量还未被初始化时，变量的默认值为undefined。
        3.null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。
        undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义。典型用法是：
        （1）变量被声明了，但没有赋值时，就等于undefined。
        （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。
        （3）对象没有赋值的属性，该属性的值为undefined。
        （4）函数没有返回值时，默认返回undefined。
        null表示空对象指针，"没有对象"，即该处不应该有值。典型用法是：
        （1）保存对象的变量没有真正保存对象，就可以将变量保存为null值；
        （2）null作为函数的参数，表示该函数的参数不是对象。。。。有疑问
        （2）null作为对象原型链的终点。Object.prototype.__proto__ == null

 六：new operator操作符具体干了什么呢?
    1、创建一个空对象
    2、将构造函数的作用域给新对象（this指向这个新对象）
    2、属性和方法被加入到 this 引用的对象中。
    3、最后隐式的返回 this 。
        var obj  = {};
        obj.__proto__ = Base.prototype;
        Base.call(obj); （obj=this;用this去调用构造函数base）


 七：前端安全问题
    1.xss
    2.csrf
    3.sql注入
    4.文件上传

 八：

    
 */